#include "bsqruntime.h"
namespace BSQ
{
/*forward type decls*/
class nscore__list_t_nscore__string_I10I;
class nsmain__consoleI18I;

/*type decls*/
class nscore__list_t_nscore__string_I10I : public BSQList<BSQString*, RCDecFunctor_BSQString, DisplayFunctor_BSQString>
{
public:
nscore__list_t_nscore__string_I10I(MIRNominalTypeEnum ntype) : BSQList<BSQString*, RCDecFunctor_BSQString, DisplayFunctor_BSQString>(ntype) { ; }
nscore__list_t_nscore__string_I10I(MIRNominalTypeEnum ntype, std::vector<BSQString*>&& vals) : BSQList<BSQString*, RCDecFunctor_BSQString, DisplayFunctor_BSQString>(ntype, std::move(vals)) { ; }
virtual ~nscore__list_t_nscore__string_I10I() { ; }
};

class nsmain__consoleI18I : public BSQObject
{
public:
    BSQString* nsmain__console_stdinI16I;
    BSQString* nsmain__console_stdoutI17I;

    nsmain__consoleI18I(BSQString* stdin, BSQString* stdout) : BSQObject(MIRNominalTypeEnum::nsmain__consoleI18I), nsmain__console_stdinI16I(stdin), nsmain__console_stdoutI17I(stdout) { ; }
    virtual ~nsmain__consoleI18I() { ; }

    virtual void destroy() { BSQRef::decrementDirect(this->nsmain__console_stdinI16I); BSQRef::decrementDirect(this->nsmain__console_stdoutI17I); }

    std::string display() const;
};

/*ephemeral decls*/


/*forward vable decls*/


/*forward function decls*/
BSQString* nsmain__console_____consI36I(BSQRefScope& $callerscope$);
BSQString* nscore__string__s_readlineI39I(BSQString* sI38I, BSQRefScope& $callerscope$);
BSQString* nscore__string__readlineI41I(BSQString* _thisI40I, BSQRefScope& $callerscope$);
BSQRecord nsmain__console__readlineI43I(BSQRefScope& $callerscope$);
BSQString* nscore__string__s_writelineI47I(BSQString* sI38I, BSQRefScope& $callerscope$);
BSQString* nscore__string__writelineI49I(BSQString* _thisI40I, BSQString* msgI48I, BSQRefScope& $callerscope$);
nsmain__consoleI18I* nsmain__console__writelineI50I(nsmain__consoleI18I* _thisI40I, BSQString* msgI48I, BSQRefScope& $callerscope$);
nsmain__consoleI18I* fn__input_bsq_25__573I55I(nsmain__consoleI18I* consoleI54I, BSQRefScope& $callerscope$);
nsmain__consoleI18I* nsiterate__steps_s_nsmain__console__input_bsq_25_0_I58I(nsmain__consoleI18I* initialI56I, int64_t kI57I, BSQRefScope& $callerscope$);
int64_t nscore__list__s_size_t_nscore__string_I61I(nscore__list_t_nscore__string_I10I* lI60I);
BSQBool nscore__list__front_t_nscore__string___preI62I(nscore__list_t_nscore__string_I10I* _thisI40I);
BSQString* nscore__list__s_unsafe_get_t_nscore__string_I65I(nscore__list_t_nscore__string_I10I* lI60I, int64_t iI64I, BSQRefScope& $callerscope$);
BSQString* nscore__list__front_t_nscore__string_I66I(nscore__list_t_nscore__string_I10I* _thisI40I, BSQRefScope& $callerscope$);
BSQString* nscore__string__s_concatI68I(nscore__list_t_nscore__string_I10I* s1I67I, BSQRefScope& $callerscope$);
BSQString* nscore__string__concatI70I(nscore__list_t_nscore__string_I10I* argsI69I, BSQRefScope& $callerscope$);
BSQString* nsmain__mainI77I(BSQRefScope& $callerscope$);

/*typecheck decls*/


/*vable decls*/


/*function decls*/
std::string nsmain__consoleI18I::display() const
    {
        BSQRefScope _scope_I19I;
        return std::string("NSMain::Console{ ") + diagnostic_format(((Value)this->nsmain__console_stdinI16I)) + std::string(", ") + diagnostic_format(((Value)this->nsmain__console_stdoutI17I)) + std::string(" }");
    }
BSQString* nsmain__console_____consI36I(BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQString* $$return; BSQString* ___ir_ret__I37I;

    ___ir_ret__I37I = (&Runtime::STR__0);
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

BSQString* nscore__string__s_readlineI39I(BSQString* sI38I, BSQRefScope& $callerscope$) { 
    BSQRefScope _scope_I19I;
    char line[255]; scanf("%[^\n]s",line); std::string str(line); auto $$return = BSQ_NEW_NO_RC(BSQString, std::move(str));
    $callerscope$.callReturnDirect($$return);
    return $$return;
 }

BSQString* nscore__string__readlineI41I(BSQString* _thisI40I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQString* $$return; BSQString* _tmp_0I42I; BSQString* ___ir_ret__I37I;

    _tmp_0I42I = nscore__string__s_readlineI39I(_thisI40I, _scope_I19I);
    ___ir_ret__I37I = _tmp_0I42I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

BSQRecord nsmain__console__readlineI43I(BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQRecord $$return; BSQRecord _tmp_0I42I; BSQRecord ___ir_ret__I37I;
    BSQString* _tmp_2I44I; BSQString* _tmp_3I45I; BSQString* _tmp_4I46I;

    _tmp_2I44I = nsmain__console_____consI36I(_scope_I19I);
    _tmp_3I45I = nscore__string__readlineI41I(_tmp_2I44I, _scope_I19I);
    _tmp_4I46I = nsmain__console_____consI36I(_scope_I19I);
    _tmp_0I42I = BSQRecord::createFromSingle<(DATA_KIND_CLEAR_FLAG | DATA_KIND_POD_FLAG | DATA_KIND_API_FLAG)>({ std::make_pair(MIRPropertyEnum::stdin, ((Value)_tmp_3I45I)), std::make_pair(MIRPropertyEnum::stdout, ((Value)_tmp_4I46I)) });
    ___ir_ret__I37I = _tmp_0I42I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    RCReturnFunctor_BSQRecord{}($$return, $callerscope$);
    return $$return;
}

BSQString* nscore__string__s_writelineI47I(BSQString* sI38I, BSQRefScope& $callerscope$) { 
    BSQRefScope _scope_I19I;
    std::string str = std::string(sI38I->sdata.cbegin(), sI38I->sdata.cend()); std::cout << str << "\n"; auto $$return = BSQ_NEW_NO_RC(BSQString, std::move(str));
    $callerscope$.callReturnDirect($$return);
    return $$return;
 }

BSQString* nscore__string__writelineI49I(BSQString* _thisI40I, BSQString* msgI48I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQString* $$return; BSQString* _tmp_0I42I; BSQString* ___ir_ret__I37I;

    _tmp_0I42I = nscore__string__s_writelineI47I(msgI48I, _scope_I19I);
    ___ir_ret__I37I = _tmp_0I42I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

nsmain__consoleI18I* nsmain__console__writelineI50I(nsmain__consoleI18I* _thisI40I, BSQString* msgI48I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQString* _tmp_5I51I; BSQString* _tmp_7I52I; BSQString* _tmp_8I53I;
    nsmain__consoleI18I* $$return; nsmain__consoleI18I* _tmp_2I44I; nsmain__consoleI18I* ___ir_ret__I37I;

    _tmp_5I51I = _thisI40I->nsmain__console_stdinI16I;
    _tmp_7I52I = nsmain__console_____consI36I(_scope_I19I);
    _tmp_8I53I = nscore__string__writelineI49I(_tmp_7I52I, msgI48I, _scope_I19I);
    _tmp_2I44I = BSQ_NEW_ADD_SCOPE(_scope_I19I, nsmain__consoleI18I, INC_REF_DIRECT(BSQString, _tmp_5I51I), INC_REF_DIRECT(BSQString, _tmp_8I53I));
    ___ir_ret__I37I = _tmp_2I44I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

nsmain__consoleI18I* fn__input_bsq_25__573I55I(nsmain__consoleI18I* consoleI54I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQString* _tmp_4I46I;
    nsmain__consoleI18I* $$return; nsmain__consoleI18I* _tmp_0I42I; nsmain__consoleI18I* ___ir_ret__I37I;

    _tmp_4I46I = consoleI54I->nsmain__console_stdinI16I;
    _tmp_0I42I = nsmain__console__writelineI50I(consoleI54I, _tmp_4I46I, _scope_I19I);
    ___ir_ret__I37I = _tmp_0I42I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

nsmain__consoleI18I* nsiterate__steps_s_nsmain__console__input_bsq_25_0_I58I(nsmain__consoleI18I* initialI56I, int64_t kI57I, BSQRefScope& $callerscope$) { 
    BSQRefScope _scope_I19I;
    BSQRefScope _lambda_scope_I59I(true); nsmain__consoleI18I* cacc = initialI56I; for(int64_t i = 0; i < kI57I; ++i) { nsmain__consoleI18I* nacc = [=, &_lambda_scope_I59I](nsmain__consoleI18I* $arg_0) -> nsmain__consoleI18I* { return fn__input_bsq_25__573I55I($arg_0, _lambda_scope_I59I); }(cacc); RCDecFunctor_BSQRef{}(cacc); cacc = nacc; } auto $$return = cacc;
    $callerscope$.callReturnDirect($$return);
    return $$return;
 }

int64_t nscore__list__s_size_t_nscore__string_I61I(nscore__list_t_nscore__string_I10I* lI60I) { 
    BSQRefScope _scope_I19I;
    auto $$return = (int64_t)(lI60I->entries.size());
    
    return $$return;
 }

BSQBool nscore__list__front_t_nscore__string___preI62I(nscore__list_t_nscore__string_I10I* _thisI40I)
{
    BSQRefScope _scope_I19I;
    BSQBool $$return, _tmp_0I42I, ___ir_ret__I37I;
    int64_t _tmp_1I63I;

    _tmp_1I63I = nscore__list__s_size_t_nscore__string_I61I(_thisI40I);
    _tmp_0I42I = !EqualFunctor_int64_t{}(_tmp_1I63I, 0);
    ___ir_ret__I37I = _tmp_0I42I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    return $$return;
}

BSQString* nscore__list__s_unsafe_get_t_nscore__string_I65I(nscore__list_t_nscore__string_I10I* lI60I, int64_t iI64I, BSQRefScope& $callerscope$) { 
    BSQRefScope _scope_I19I;
    auto $$return = lI60I->entries[iI64I];
    $callerscope$.callReturnDirect($$return);
    return $$return;
 }

BSQString* nscore__list__front_t_nscore__string_I66I(nscore__list_t_nscore__string_I10I* _thisI40I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQBool _tmp_0I42I;
    BSQString* $$return; BSQString* _tmp_1I63I; BSQString* ___ir_ret__I37I;

    _tmp_0I42I = nscore__list__front_t_nscore__string___preI62I(_thisI40I);
    if(_tmp_0I42I) {goto preok_4;} else {goto prefail_3;}

prefail_3:
    BSQ_ABORT("Fail pre-condition", "/usr/home/basilisk/BosqueLanguage/impl/bin/core/cpp/list.bsq", 100);

preok_4:
    _tmp_1I63I = nscore__list__s_unsafe_get_t_nscore__string_I65I(_thisI40I, 0, _scope_I19I);
    ___ir_ret__I37I = _tmp_1I63I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

BSQString* nscore__string__s_concatI68I(nscore__list_t_nscore__string_I10I* s1I67I, BSQRefScope& $callerscope$) { 
    BSQRefScope _scope_I19I;
    std::string acc; for(auto iter = s1I67I->entries.cbegin(); iter != s1I67I->entries.cend(); ++iter) { acc.append((*iter)->sdata); }; auto $$return = BSQ_NEW_NO_RC(BSQString, std::move(acc));
    $callerscope$.callReturnDirect($$return);
    return $$return;
 }

BSQString* nscore__string__concatI70I(nscore__list_t_nscore__string_I10I* argsI69I, BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQBool _tmp_0I42I, _tmp_5I51I;
    int64_t _tmp_1I63I, _tmp_6I71I;
    BSQString* $$return; BSQString* _tmp_11I72I; BSQString* ___ir_ret__I37I; BSQString* _tmp_9I73I; BSQString* ___ir_ret___1I74I; BSQString* ___ir_ret___2I75I; BSQString* ___ir_ret___3I76I;

    _tmp_1I63I = nscore__list__s_size_t_nscore__string_I61I(argsI69I);
    _tmp_0I42I = EqualFunctor_int64_t{}(_tmp_1I63I, 0);
    if(_tmp_0I42I) {goto Lifstmt_0true_4;} else {goto Lifstmt_0false_5;}

Lifstmt_0false_5:
    _tmp_6I71I = nscore__list__s_size_t_nscore__string_I61I(argsI69I);
    _tmp_5I51I = EqualFunctor_int64_t{}(_tmp_6I71I, 1);
    if(_tmp_5I51I) {goto Lifstmt_1true_6;} else {goto Lifstmt_1false_7;}

Lifstmt_1false_7:
    _tmp_11I72I = nscore__string__s_concatI68I(argsI69I, _scope_I19I);
    ___ir_ret__I37I = _tmp_11I72I;
    ___ir_ret___3I76I = ___ir_ret__I37I;
    goto returnassign;

Lifstmt_1true_6:
    _tmp_9I73I = nscore__list__front_t_nscore__string_I66I(argsI69I, _scope_I19I);
    ___ir_ret___1I74I = _tmp_9I73I;
    ___ir_ret___3I76I = ___ir_ret___1I74I;
    goto returnassign;

Lifstmt_0true_4:
    ___ir_ret___2I75I = (&Runtime::STR__0);
    ___ir_ret___3I76I = ___ir_ret___2I75I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret___3I76I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}

BSQString* nsmain__mainI77I(BSQRefScope& $callerscope$)
{
    BSQRefScope _scope_I19I;
    BSQRecord _tmp_2I44I;
    BSQString* $$return; BSQString* _tmp_3I45I; BSQString* _tmp_4I46I; BSQString* _tmp_11I72I; BSQString* _tmp_15I78I; BSQString* _tmp_7I52I; BSQString* ___ir_ret__I37I;
    nscore__list_t_nscore__string_I10I* _tmp_16I79I;
    nsmain__consoleI18I* _tmp_1I63I; nsmain__consoleI18I* _tmp_0I42I; nsmain__consoleI18I* consoleI54I;

    _tmp_2I44I = nsmain__console__readlineI43I(_scope_I19I);
    _tmp_3I45I = BSQ_GET_VALUE_PTR(_tmp_2I44I.atFixed<MIRPropertyEnum::stdin>(), BSQString);
    _tmp_4I46I = BSQ_GET_VALUE_PTR(_tmp_2I44I.atFixed<MIRPropertyEnum::stdout>(), BSQString);
    _tmp_1I63I = BSQ_NEW_ADD_SCOPE(_scope_I19I, nsmain__consoleI18I, INC_REF_DIRECT(BSQString, _tmp_3I45I), INC_REF_DIRECT(BSQString, _tmp_4I46I));
    _tmp_0I42I = nsiterate__steps_s_nsmain__console__input_bsq_25_0_I58I(_tmp_1I63I, 10, _scope_I19I);
    consoleI54I = _tmp_0I42I;
    _tmp_11I72I = consoleI54I->nsmain__console_stdinI16I;
    _tmp_15I78I = consoleI54I->nsmain__console_stdoutI17I;
    _tmp_16I79I = BSQ_NEW_ADD_SCOPE(_scope_I19I, nscore__list_t_nscore__string_I10I, MIRNominalTypeEnum::nscore__list_t_nscore__string_I10I, { INC_REF_DIRECT(BSQString, (&Runtime::STR__1)), INC_REF_DIRECT(BSQString, _tmp_11I72I), INC_REF_DIRECT(BSQString, (&Runtime::STR__2)), INC_REF_DIRECT(BSQString, _tmp_15I78I) });
    _tmp_7I52I = nscore__string__concatI70I(_tmp_16I79I, _scope_I19I);
    ___ir_ret__I37I = _tmp_7I52I;
    goto returnassign;

returnassign:
    $$return = ___ir_ret__I37I;
    goto exit;

exit:
    $callerscope$.callReturnDirect($$return);
    return $$return;
}
}

using namespace BSQ;

/*main decl*/
int main(int argc, char** argv) {
    if(argc > 0 + 1 || argc < 0 + 1 - 0) { fprintf(stderr, "Expected 0 arguments but got %i\n", argc - 1); exit(1); }



  try {
    BSQRefScope _scope_I19I;
    std::cout << diagnostic_format(((Value)nsmain__mainI77I(_scope_I19I))) << "\n";
    fflush(stdout);
    return 0;
  } catch (BSQAbort& abrt) HANDLE_BSQ_ABORT(abrt) 
}
